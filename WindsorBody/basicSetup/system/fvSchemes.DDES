/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2206                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#include            "include/caseDefinition"

// compute reference length scale for hybrid scheme
L0                  #eval{ 0.5*sqrt($Aref) };

ddtSchemes
{
    default         bounded backward;
}

gradSchemes
{
    default         Gauss linear;

    limited         cellLimited Gauss linear 1;
    grad(U)         $limited;
    grad(k)         $limited;
    grad(omega)     $limited;
    grad(nuTilda)   $limited;
    grad(h)         $limited;
}

divSchemes
{
    default                             none;

    div(phi,U)                          bounded Gauss DEShybrid
        linear                    // scheme 1
        linearUpwindV grad(U)     // scheme 2
        delta                     // name of delta
        0.65                      // DES coefficient, typically = 0.65
        $UinfMag                  // Reference velocity scale
        $L0                       // Reference length scale
        0                         // Minimum sigma limit (0-1)
        1                         // Maximum sigma limit (0-1)
        1;                        // Limiter of B function, typically 1e-03

    turbulence                          bounded Gauss upwind;
    div(phi,k)                          $turbulence;
    div(phi,omega)                      $turbulence;
    div(phi,epsilon)                    $turbulence;
    div(phi,nuTilda)                    $turbulence;

    div((nuEff*dev2(T(grad(U)))))       Gauss linear;
}

laplacianSchemes
{
    default         Gauss linear limited corrected 0.33;
    laplacian(diffusivity,cellDisplacement) Gauss linear corrected;
}

interpolationSchemes
{
    default         linear;
}

snGradSchemes
{
    default         limited corrected 0.33;
}

fluxRequired
{
    default         no;
    p;
}

wallDist
{
    //method          meshWave;
    method          exactDistance;       // exactDistance recommended for SA Model
    nRequired       true;
    updateInterval  0;
}
// ************************************************************************* //
