case:
  type: CaseOnDisk
  origin: ${{yaml.location}}/../basicSetup
  uses:
    - controlDict: controlDict.SRS
    - fvSchemes: fvSchemes.SRS
    - fvSolution: fvSolution.SRS
    - turbulenceProperties: turbulenceProperties.SRS
  post_build:
      - shell: blockMesh
      - shell: ${{yaml.location}}/scripts/getFlowfieldRANS.sh
      - shell: changeDictionary -enableFunctionEntries -dict system/changeDictionaryDict.digitalFilter #DFSEM
variation:
      - operation: decomposePar
        schema: "procs{numberOfSubdomains}"
        common:
           method: kahip
        values:
           - numberOfSubdomains: 2
           - numberOfSubdomains: 4
           - numberOfSubdomains: 6
           - numberOfSubdomains: 8
           - numberOfSubdomains: 16
           - numberOfSubdomains: 24
        variation:
           - operation: fvSolution
             schema: "{solver}{preconditioner}"
             values:
                - set: solvers/"p|p_rgh"
                  solver: GKOCG
                  preconditioner: BJ
                  smoother: none
                  forceHostBuffer: 1
                  verbose: 1
                  matrixFormat: Coo
                  executor: cuda
                - set: solvers/"p|p_rgh"
                  solver: GKOCG
                  preconditioner: "{
                                       preconditioner Multigrid;
                                       caching 150;
                                   }"
                  smoother: none
                  forceHostBuffer: 1
                  verbose: 1
                  matrixFormat: Coo
                  executor: cuda
postProcess:
  queries: ["nCells", "numberOfSubdomains", "solver", "ClockTime", "timeStepContErrors_sumLocal"]
  matcher:
    - regexp: '\[OGL LOG\]\[Proc: 0\]{field}: {name}: (?P<{name}>[0-9.]*) \[ms\]'
      name: ogl_matcher
      args: ["field", "name"]
    - regexp: '\[INFO\] {name}: (?P<{name}>[0-9.]*) \[ms\]'
      name: info_matcher
      args: ["name"]
  log:
    - matcher: info_matcher
      args: ["MomentumPredictor"]
      type: average
    - matcher: info_matcher
      args: ["MatrixAssemblyPI"]
      type: average
    - matcher: info_matcher
      args: ["MatrixAssemblyPII"]
      type: average
    - matcher: info_matcher
      args: ["MatrixAssemblyU"]
      type: average
    - matcher: info_matcher
      args: ["TimeStep"]
      type: average
    - matcher: info_matcher
      args: ["PIMPLEStep"]
      type: average
